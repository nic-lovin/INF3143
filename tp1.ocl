-- INF3143 - Modélisation et spécification formelles de logiciels - Hiver 2016
-- Tp1: OCL
--
-- Travail remis à:
--  Alexandre Terrasa
--
-- Auteurs:
-- 	Nicolas Lamoureux - LAMN19109003
--  Marc-Antoine Sauvé - SAUM13119008


context Personnage

    -- Le nom d’un personnage doit faire entre 3 et 12 caractères et ne doit pas correspondre aux chaînes GOD, TEST ou ADMIN (minuscules ou majuscules, quelques soient les majuscules ou minuscules utilisées dans le nom. Ex: "GoD" ne peut être utilisé).
    inv: nom.size() >= 3 and nom.size() <= 12
        and nom.toUpper() <> 'GOD'
        and nom.toUpper() <> 'TEST'
        and nom.toUpper() <> 'ADMIN'

    -- Un personnage peut avoir entre 0 et 100 points de vie.
    inv: vie >= 0 and vie <= 100

    -- Un personnage possède une force strictement supérieure à 0.
    inv: force > 0

    -- Un personnage a forcément un métier.
    inv: metier <> null

    -- Deux personnages ne peuvent avoir le même nom.
    inv: Personnage.allInstances()->forAll(p1, p2 |
        p1 <> p2 implies p1.nom <> p2.nom)

    -- Un personnage ne peut pas être dans deux équipes en même temps.
    inv: Equipe.allInstances()->select(equipe | equipe.personnages->includes(self))->size() <= 1


-- estMort(): Boolean permet de vérifier si un personnage est mort:
context Personnage::estMort(): Boolean

    -- Retourne vrai si la vie du personnage est égale à 0.
    post: result = (vie = 0)


-- blesser(Integer dommages) permet de blesser un personnage:
context Personnage::blesser(dommages: Integer)

    -- La méthode prend en paramètre un nombre de points de dommages à retirer (toujours positif).
    pre: dommages > 0

    -- Elle soustrait les points de dommages à la valeur de vie du personnage.
    post: vie = vie@pre - dommages


-- attaquer(Personnage cible) permet à un personnage d’attaquer un autre personnage:
context Personnage::attaquer(cible: Personnage)

    -- Pour attaquer, le personnage doit être en vie.
    pre: vie > 0

    -- Un personnage ne peut attaquer un autre personnage que s’il dispose d’une arme.
    pre: arme <> null

    -- Un personnage ne peut s’attaquer lui-même.
    pre: cible <> self

    -- Un personnage ne peut attaquer un membre de son équipe.
    pre: equipe.personnages->excludes(cible)

    -- Une attaque retire attaquant.force + attaquant.arme.getDommages() aux points de vie de la cible personnage.
    -- Il est possible d’attaquer un personnage mort mais cela ne lui retire pas de points de vie.
    post: let degats = force + arme.dommages + arme.enchantements->collect(bonus)->sum() in
        cible.vie = 0.max(cible.vie@pre.vie - degats)


context Arme

    -- Une arme peut avoir entre 0 et 3 enchantements.
    inv: enchantements->size() >= 0 and enchantements->size() <= 3

    -- Une arme ne peut avoir d’enchantements que si elle est portée par un personnage.
    inv: Personnage.allInstances()->select(p | p.arme = self)->size() = 0 implies enchantements->size() = 0

    -- Les points de dommages d’une arme sont supérieurs ou égal à 0.
    inv: dommages >= 0


-- La méthode getDommages() calcule les dommages infligés par l’arme avec ses enchantements.
context Arme::getDommages(): Integer

    -- dommage + les bonus des enchantements appliqués à sur l’arme
    post: result = dommages + enchantements->collect(bonus)->sum()


context Enchantement

    -- Un enchantement est toujours rattaché à une arme et cette arme doit être équipée par un personnage. Sinon l’enchantement ne devrait pas exister.
    inv: Arme.allInstances()->select(a | a.enchantements->includes(self))->size() = 1


-- getBonus(): Integer retourne le bonus de dommage ajouté par l’enchantement.
context Enchantement::getBonus(): Integer

    post: result = bonus


context Equipe

    -- Une équipe a un nom possédant entre 6 et 12 caractères
    inv: nom.size() >= 6 and nom.size() <= 12

    -- Une équipe à doit toujours avoir un chef.
    inv: chef <> null

    -- Le chef d’une équipe doit être inscrit dans cette équipe.
    inv: personnages->includes(chef)

    -- Une équipe comprend entre 3 et 8 personnages.
    inv: personnages->size() >= 3 and personnages->size() <= 8

    -- Une équipe doit comprendre au moins un personnage portant une arme.
    inv: personnages->select(arme <> null)->notEmpty()

    -- Une équipe doit avoir au moins un prêtre, un guerrier et un mage.
    inv: personnages->select(p | p.metier.oclIsTypeOf(Pretre))->notEmpty()
    inv: personnages->select(p | p.metier.oclIsTypeOf(Guerrier))->notEmpty()
    inv: personnages->select(p | p.metier.oclIsTypeOf(Mage))->notEmpty()


-- estMorte(): Boolean
context Equipe::estMorte(): Boolean

    -- Retourne vrai si et seulement si tous ses membres sont morts.
    post: result = personnages->select(vie > 0)->isEmpty()


context Metier

    -- Il existe 3 types de métiers:
    -- Prêtre
    -- Mage
    -- Guerrier
    -- Chacune des sous-classes de métier est un singleton.
    inv: oclIsTypeOf(Pretre) or oclIsTypeOf(Mage) or oclIsTypeOf(Guerrier)
    inv: Mage.allInstances()->size() <= 1
    inv: Guerrier.allInstances()->size() <= 1
    inv: Pretre.allInstances()->size() <= 1


context Pretre

    -- Les prêtres ne peuvent pas porter d’armes, ils ne font que soigner.
   inv: Personnage.allInstances()->select(p | p.metier.oclIsTypeOf(Pretre) and p.arme <> null)->isEmpty()


context Pretre::soigner(pretre: Personnage, cible: Personnage, mana: Integer)

    -- Pour pouvoir soigner, le soigneur doit être un prêtre.
    pre: pretre.metier.oclIsTypeOf(Mage)

    -- Un prêtre doit être en vie pour pouvoir soigner.
    pre: pretre.vie > 0

    -- Un prêtre ne peut pas se soigner lui-même.
    pre: pretre <> cible

    -- Un prêtre ne peut soigner que des membres de son équipe.
    pre: pretre.equipe.personnages->includes(cible)

    -- Un prêtre ne peut pas soigner un personnage déjà mort.
    pre: cible.vie > 0

    -- Un prêtre ne peut pas soigner un personnage au delà de 100 points de vie.
    pre: cible.vie < 100

    -- Le nombre de points de mana transformés doit être strictement supérieur à 0.
    pre: mana > 0

    -- Le nombre de points de mana transformés ne peut pas être supérieur au nombre de points de mana du prêtre.
    pre: pretre.mana >= mana

   -- Grace au soin, la cible gagne autant de points de vie que de points de mana dépensés par le prêtre.
   post: cible.vie = cible.vie@pre + mana

   -- Le prêtre perd autant de points de mana que de dépensés pour le soin.
   post: pretre.mana = pretre.mana@pre - mana


context Mage

    -- Les mages ne peuvent pas porter d’armes à deux mains.
    inv: Personnage.allInstances()->select(p | p.metier.oclIsKindOf(Mage))->collect(arme.aDeuxMains)->excludes(true)


context Mage::lancerSort(mage: Personnage, cible: Personnage, mana: Integer)

    -- Pour lancer un sort, le mage doit être de type Mage.
    pre: mage.metier.oclIsTypeOf(Mage)

   -- Un mage doit être en vie pour lancer un sort.
    pre: mage.vie > 0

    -- mana doit être strictement supérieur à 0.
    pre: mana > 0

    -- mana doit être inférieur ou égal à la quantité de mana dont dispose le mage.
    pre: mage.mana >= mana

    -- Un mage ne peut pas se lancer un sort à lui-même.
    pre: mage <> cible

    -- Lancer un sort diminue la mana du mage du nombre de points de mana utilisés.
    post: mage.mana = mage.mana@pre - mana

    -- Lancer un sort diminue la vie de la cible du nombre de points de mana utilisés.
    post: cible.vie = cible.vie@pre - mana

    -- Un mage ne peut pas lancer un sort à un personnage membre de son équipe.
    pre: mage.equipe.personnages->excludes(cible)


context Guerrier::berserk(guerrier: Personnage, mana: Integer)

    -- Pour utiliser berserk, le guerrier doit être de type Guerrier.
    pre: guerrier.metier.oclIsTypeOf(Guerrier)

    -- Un guerrier doit être en vie pour rentrer en mode berserk.
    pre: guerrier.vie > 0

    -- Le nombre de points de mana sacrifiés par le guerrier doit être strictement suppérieur à 0.
    pre: mana > 0

    -- Le nombre de points de mana sacrifiés par le guerrier doit être inférieur ou égal à la quantité de mana dont il dispose.
    pre: guerrier.mana >= mana

    -- La force du guerrier est augmentée du nombre de points de mana dépensés.
    post: guerrier.force = guerrier.force@pre + mana
